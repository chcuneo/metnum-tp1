void backwardSubstitutionLU(Matriz* mat){
	double y;
	for (int i = mat->n - 1; i >= 0; i--){
		y = mat->valores[i];
		for (int j = i + 1; j < mat->n; j++){
			y = y - mat->U[i][j] * mat->valores[j];
		}
		mat->valores[i] = y / mat->U[i][i];
	}
	mat->solved = true;
}

void crout(Matriz * mat) {
	int i, j, k;
	int n = mat->n;
	double sum = 0;
	mat->L = new double*[n];
	mat->U = new double*[n];
	for (int x = 0; x < n; x++){
		mat->U[x] = new double[n];
		mat->L[x] = new double[n];
		mat->U[x][x] = 1;
	}

	for (j = 0; j < n; j++) {
		for (i = j; i < n; i++) {
			sum = 0;
			for (k = 0; k < j; k++) {
				sum = sum + mat->L[i][k] * mat->U[k][j];
			}
			mat->L[i][j] = mat->get(i,j) - sum;
		}

		for (i = j; i < n; i++) {
			sum = 0;
			for (k = 0; k < j; k++) {
				sum = sum + mat->L[j][k] * mat->U[k][i];
			}
			if (mat->L[j][j] == 0) {
				printf("det(L) close to 0!\n Can't divide by 0...\n");
				exit(EXIT_FAILURE);
			}
			mat->U[j][i] = (mat->get(j,i) - sum) / mat->L[j][j];
		}
	}
}